Анализ AOL 9.5 (CDDBControl.dll) Переполнение буфера кучи ActiveX

Я решил рассмотреть эту уязвимость и оценить "эксплуатабельность" этоо бага в Windows XP SP3. Несмотря на то, что [управление] было помечено как небезопасное, я подумал, что его будет любопытно проанализировать. Я не хотел добавлять эту часть, но sinn3r попросил, и я добавил :). Поскольку всё управляется контроллером ActiveX, один из способов добраться до бага - через IE, используя скриптовый язык. Я решил использовать JavaScript просто потому что он самый гибкий и на нём написана heapLib.js.

Моя среда:
- IE 6/7
- XP SP3
- heapLib.js

Да начнётся веселье! В первую очередь я добился запустил PoC с  exploit-db написанный Hellcode Research. Проанализируем краш:

№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№

Мы видим, что в сегменте текущей кучи кончилась свободная память и он не может выделять её в этом сегменте.




Рассмотрим его:



Память в сегменте кончилась и у нас нет возможности создать новый сегмент. Что же нам делать? Что ж мы знаем, что придётся разрывать связь в списке чанков. Чтобы это сделать, нужно, чтобы менеджер кучи скопировал данные в аллоцирующий буффер (перезаписывая другия чанки), но не вылез за пределы текущего сегмента. Тогда при следующей аллокации или при попытке освободить чанк, произойдёт попытка разорвать связь. Я подправил PoC, чтобы переполнение срабатывало на 2240 байтах вместо 4000.

№№№№№№№№№№№№№№№№№№№

Сейчас, когда мы используем баг, мы на самом деле не крашим браузер. Конечно, чанк переполнен, но пока не произведен второй разрыв, он не будет падать. Однако при закрытии браузера, сборщик мусора будет проходить по всем аллокациям и освобождать чанки, тем самым много раз вызывая RtlAllocateHeap(), а значит и сам баг. В этом случае всё становится более реалистичным.

№№№№№№№№№№№№№№№№№№№№№№№№№№№№


Отлично! У нас есть потенциально эксплуатируемые условия. В этом случае в flink находится в EAX, а blink в EDI. В SP0-1 и ранее можно было просто провести обычное переполнение функций UEF и получить управление. Но у нас есть доступ к скриптовому механизму браузера, что позволит "массажировать" кучу в попытках использовать уязвимость в SP3. При анализе структуры кучи я быстро заметил, что контроллер ActiveX создаёт свою собственную кучу в рантайме. Краш при этом происходит при вставке во freelist.


Используя heapLib.js мне удалось манипулировать кучей самого процесса, *не* кучей контроллера ActiveX. В этом месте я прихожу к выводу, что в Windows XP SP3 и выше это эксплуатация переполнения буфера кучи *выглядит* невозможной. Конечно, есть шанс серьёзной ошибки в интерпретации, но насколько я могу сказать, если нет возможности манипуляции с кучей, нет возможности эксплуатации.

Хуки:
При отладке приложений, содержащих переполнение кучи, полезно знать количество аллокаций и освобождений памяти, а также их размеры. Во время жизни процесса/потока их происходит очень много. Очевидно, за ними трудно следить через брекпойнты. В Immunity Debugger вы ожете использовать !hookheap плагин, чтобы повесить хук на RtlAllocateHeap() и RtlFreeHeap(), что позволит вам находит размер и количество аллокаций/освобождений в определённых операциях.


Можно заметить, что одна аллокация особенно выделяется. Выделение большого количества байт указывает на запрос К целевому уязвимому серверу.

Заключение

Менеджеры кучи очень сложны для понимания, для эксплуатации переполнения кучи требуется много человекочасов, посколько каждая ситуация отличается от других. Понимание теукщего контекста в целевом приложени и ограничений, которые он несёт, являются ключом для понимания, есть ли возможность эксплуации переполнения. Механизмы защиты, введённые Microsoft предотвращают большинство обычных способов переполнения, однако периодически мы можем видеть как в некоторых приложениях возникают условия, позволяющие использовать их атакующему.

Ссылки:
- http://windbg.info/doc/1-common-cmds.html
- http://www.insomniasec.com/publications/Heaps_About_Heaps.ppt
- http://cybertech.net/~sh0ksh0k/projects/winheap/XPSP2 Heap Exploitation.ppt
- some small aspects from: http://illmatics.com/Understanding_the_LFH.pdf
- http://www.blackhat.com/presentations/win-usa-04/bh-win-04-litchfield/bh-win-04-litchfield.ppt
- http://www.insomniasec.com/publications/Exploiting_Freelist[0]_On_XPSP2.zip
- http://www.insomniasec.com/publications/DEPinDepth.ppt (heap segment information)
- Advanced windows Debugging (Mario Hewardt)
- www.ptsecurity.com/download/defeating-xpsp2-heap-protection.pdf
- http://grey-corner.blogspot.com/2010/12/introducing-vulnserver.html
- http://www.immunityinc.com/downloads/immunity_win32_exploitation.final2.ppt
- Understanding and bypassing Windows Heap Protection by Nicolas Waisman (2007): http://kkamagui.springnote.com/pages/1350732/attachments/579350

