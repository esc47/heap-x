При запуске приложение попросит ввести какие-нибудь данные. Так как данные подаются на стандартный поток ввода (STDIN), у нас не получится просто скопировать туда бинарные данные. Чтобы было понятнее, мы скормим программе ASCII текст, а затем исправим его в памяти.

Внимательный читатель заметит, что чанк, в который мы пишем, имеет размер 1024 байта. Любые данные длинной больше этого размера переполнят буфер и дадут нам контроль за выполнением. Чтобы получить полный контроль, потребуется перезаписать 16 байт: в первых 8-ми хранится заголовок следующего чанка, в остальных - указатели flink/blink. Давайте сгенерируем данные:

Отлично, скопируем их на вход приложения. Отладчик остановится на вызове HeapFree:

Проанализируем происходящее. Для начала взглянем на freelist и осмотрим его структуру командой !heaper ab -g.

Ту же информацию можно представить визуально командой !heaper ab 490000 -g. Она создаст картинку с изображением графа и сохранит её в 'C:\Program Files\Immunity Inc\Immunity Debugger\' (имя картинки по умолчанию 'freelist_graph.png').


Легко заметить, что flink/blink перезаписаны нашими данными. Теперь мы хотим перезаписать blink, хранящийся в элементе lookaside[3]. На данном этапе массив lookaside пока пуст, но мы подделаем несколько элементов. Заменим указатель:


Элемент freelist[0] с изменённым указателем:


Отлично, а сейчас важный момент. Когда мы сделаем один шаг отладчиком после вызова HeapFree, мы заметим серьёзные изменения. В lookaside[3] появятся 3 элемента, а наш flink станет flink'ом подделанного чанка в lookaside. Использовав '!heaper af [heap]' или '!heaper analysefrontend [heap]', вы увидите следующее:

Напомню, что для получения графа можно использовать команду !heaper af 490000 -g. В этом случае имя по умолчанию будет lal_graph.png. Его можно изменить флагом -f.

Продолжим выполнение до следующего вызова HeapAlloc, мы увидим, что flink возвращется из любого элемента lookaside.

