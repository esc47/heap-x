Разумеется 0x43434343 не является указателем на существующий чанк, а нам нужно, чтобы flink указывал на доступную для чтения/записи память. Для этого мы возьмём из PEB указатель на функцию FastPEBLockRoutine, описанный в предыдущей статье. Как сказано в ней же, указатели в PEB рандомизированы, но так как я всего лишь демонстрирую метод, мне нужен просто указатель, по которому можно производить запись. Чтобы получить его значение, воспользуемся командой '!heaper dp -m'. Она покажет нам содержимое управляющей стуктуры PEB. В ней по смещению 0x20 находится указатель на FastPEBLockRoutine.


Пропатчим 0x43434343 в элементе lookaside[3]:

Теперь можно просто возобновить работу программы, и чанк будет доступен для чтения и записи. В итоге:

Мы добились ситуации, в которой возможна запись данных/шеллкода в любые 4 байта в памяти.
При попытке вызова из RtlAcquirePebLock+0x28 FastPEBLockRoutine(). Поскольку FastPEBLockRoutine() использует текущий PEB с контролируемым нами указателем, мы можем заменить его на адрес нашего шеллкода.

С этого момента, запустить шеллкод проще простого [......] и потребуется выполнение кода по указателю в EAX. К тому же первый этап шеллкода должен будет пропатчить указатель, который мы перезаписали. Ниже заготовка, как это можно сделать.

В конечном итоге она будет транслирована в что-то типо этого:

Таким образом указатель будет восстановлен, и шеллкод не будет вызываться бесконечно. Конечно, в Windows XP SP3 это всё должно делаться динамически, если адрес PEB был подобран перебором. Я оставлю сообразительному читателю расширение ассемблерной заготовки выше до работы с динамическим PEB и правкой смещения 0x20. Вы может использовать fs:[0x30].

Если в следующий раз захотим эксплуатировать приложение одной командой, она будет выглядеть так (предполагается, что мы передаём данные по сокету):

Разумеется NULL байт будет добавлен в конце строки.

Требования и ограничения:

Вы должны знать базовый адрес кучи, структуру которой хотите переполнять. Это не так просто, как может показаться, но [утечки информации сильно в этом помогут].
Вам потребуется заранее определить базовый адрес PEB, или хотя быть использовать другой указатель на функцию, который вы сможете перезаписать и который будет вызван. Про это я расскажу позже.
Вы должны контролировать размер выделяемых чанков.
Вы должны имет возможность заставить приложение освободить чанк, который меньше перезаписанного, но больше того, что вы переполнили. Это может происходить без конкретного правила, однако контроль над размерами выделяемых чанков и над временем, когда они освобождаются безусловно помогут.
